diff --git a/PSO_Keystroke/.classpath b/PSO_Keystroke/.classpath
index 23c7123..f006b59 100644
--- a/PSO_Keystroke/.classpath
+++ b/PSO_Keystroke/.classpath
@@ -4,5 +4,6 @@
 	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8"/>
 	<classpathentry kind="lib" path="weka.jar"/>
 	<classpathentry kind="lib" path="poi-3.10.1.jar"/>
+	<classpathentry kind="lib" path="/MathTest/src"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
diff --git a/PSO_Keystroke/commons-math3-3.6.1.jar b/PSO_Keystroke/commons-math3-3.6.1.jar
new file mode 100644
index 0000000..0ff582c
Binary files /dev/null and b/PSO_Keystroke/commons-math3-3.6.1.jar differ
diff --git a/PSO_Keystroke/src/factory/FactoryParticle.java b/PSO_Keystroke/src/factory/FactoryParticle.java
index 28fc478..7820fc4 100644
--- a/PSO_Keystroke/src/factory/FactoryParticle.java
+++ b/PSO_Keystroke/src/factory/FactoryParticle.java
@@ -6,7 +6,6 @@ import main.Particle;
 public class FactoryParticle {
 
 	private static volatile FactoryParticle instance;
-	private int IDGenarator = 0;
 	private static int lengthGenes;
 	private static Classification classification;
 
diff --git a/PSO_Keystroke/src/main/PSO.java b/PSO_Keystroke/src/main/PSO.java
index 9815a51..0fc78f6 100644
--- a/PSO_Keystroke/src/main/PSO.java
+++ b/PSO_Keystroke/src/main/PSO.java
@@ -38,8 +38,8 @@ public class PSO {
 
 	public static void main(String[] args) throws Exception {
 
-		for (int i = 0; i < 20; i++) {
-			new PSO(100, 100, i);
+		for (int i = 0; i < 2; i++) {
+			new PSO(100, 300, i);
 			Classification.getInstance().changeSeed();
 		}
 	}
diff --git a/PSO_Keystroke/src/main/Particle.java b/PSO_Keystroke/src/main/Particle.java
index 46dfa95..44f0341 100644
--- a/PSO_Keystroke/src/main/Particle.java
+++ b/PSO_Keystroke/src/main/Particle.java
@@ -5,7 +5,7 @@ import java.util.Arrays;
 public class Particle implements Comparable<Particle> {
 
 	private double pBest[], gBest[], position[], velocity[];
-	private double fitness, fitnesspBest, fitnessgBest, FAR, FRR;
+	private double fitness, fitnesspBest, fitnessgBest, FAR, FRR, gBestFAR, gBestFRR;
 	private int size;
 
 	public Particle(int size) {
@@ -79,14 +79,14 @@ public class Particle implements Comparable<Particle> {
 	public boolean[] getBinaryParticle() {
 		boolean[] positionsTemp = new boolean[size];
 		for (int i = 0; i < size; i++)
-			positionsTemp[i] = position[i] >= 0 ? true : false;
+			positionsTemp[i] = position[i] == 1 ? true : false;
 		return positionsTemp;
 	}
 
 	public String toStringBinary() {
 		String arrayString = "[";
 		for (int i = 0; i < position.length; i++) {
-			arrayString += position[i] >= 0 ? 1 : 0;
+			arrayString += position[i] == 1 ? 1 : 0;
 			if (i + 1 != position.length) {
 				arrayString += ",";
 			}
@@ -98,7 +98,7 @@ public class Particle implements Comparable<Particle> {
 	public String toStringBinarygBest() {
 		String arrayString = "[";
 		for (int i = 0; i < gBest.length; i++) {
-			arrayString += gBest[i] >= 0 ? 1 : 0;
+			arrayString += gBest[i] == 1 ? 1 : 0;
 			if (i + 1 != gBest.length) {
 				arrayString += ",";
 			}
@@ -106,7 +106,7 @@ public class Particle implements Comparable<Particle> {
 		arrayString += "]";
 		return arrayString;
 	}
-	
+
 	@Override
 	public String toString() {
 		return Arrays.toString(position);
@@ -166,4 +166,20 @@ public class Particle implements Comparable<Particle> {
 		return (100 * getDisabledFeaturesgBest()) / size;
 	}
 
+	public double getgBestFAR() {
+		return gBestFAR;
+	}
+
+	public void setgBestFAR(double gBestFAR) {
+		this.gBestFAR = gBestFAR;
+	}
+
+	public double getgBestFRR() {
+		return gBestFRR;
+	}
+
+	public void setgBestFRR(double gBestFRR) {
+		this.gBestFRR = gBestFRR;
+	}
+
 }
diff --git a/PSO_Keystroke/src/main/ParticleToExcel.java b/PSO_Keystroke/src/main/ParticleToExcel.java
index 2aa6e4f..d907818 100644
--- a/PSO_Keystroke/src/main/ParticleToExcel.java
+++ b/PSO_Keystroke/src/main/ParticleToExcel.java
@@ -13,8 +13,8 @@ public class ParticleToExcel {
 		System.out.println("The best particle is: " + population.get(0).getFitnessgBest() + " in interation " + interation);
 		excelGenerator.insertCellInfo(interation + 1, 0, interation, Cell.CELL_TYPE_STRING);
 		excelGenerator.insertCellInfo(interation + 1, 1, population.get(0).getFitnessgBest(), Cell.CELL_TYPE_NUMERIC);
-		excelGenerator.insertCellInfo(interation + 1, 2, population.get(0).getFAR(), Cell.CELL_TYPE_NUMERIC);
-		excelGenerator.insertCellInfo(interation + 1, 3, population.get(0).getFRR(), Cell.CELL_TYPE_NUMERIC);
+		excelGenerator.insertCellInfo(interation + 1, 2, population.get(0).getgBestFAR(), Cell.CELL_TYPE_NUMERIC);
+		excelGenerator.insertCellInfo(interation + 1, 3, population.get(0).getgBestFRR(), Cell.CELL_TYPE_NUMERIC);
 		excelGenerator.insertCellInfo(interation + 1, 4, population.get(0).toStringBinarygBest(), Cell.CELL_TYPE_STRING);
 		excelGenerator.insertCellInfo(interation + 1, 5, population.get(0).getEnableFeaturesgBest(), Cell.CELL_TYPE_NUMERIC);
 		excelGenerator.insertCellInfo(interation + 1, 6, population.get(0).getDisabledFeaturesgBest(), Cell.CELL_TYPE_NUMERIC);
diff --git a/PSO_Keystroke/src/main/Update.java b/PSO_Keystroke/src/main/Update.java
index 86e3b91..776a6a0 100644
--- a/PSO_Keystroke/src/main/Update.java
+++ b/PSO_Keystroke/src/main/Update.java
@@ -18,12 +18,11 @@ public class Update {
 			pVelocities[i] = weight * particle.getVelocity()[i]
 					+ VELOCITYCOEFFICIENT * Math.random() * (particle.getpBest()[i] - particle.getPosition()[i])
 					+ VELOCITYCOEFFICIENT * Math.random() * (particle.getgBest()[i] - particle.getPosition()[i]);
-			double position = particle.getPosition()[i] + pVelocities[i];
-			if (position > 2)
-				position = 2;
-			else if (position < -2)
-				position = -2;
-			pPositions[i] = position;
+			double sigmoidV = 1 / (1 + Math.exp(-pVelocities[i]));
+			if (Math.random() < sigmoidV)
+				pPositions[i] = 1;
+			else
+				pPositions[i] = 0;
 		}
 
 		particle.setVelocity(pVelocities);
@@ -37,6 +36,8 @@ public class Update {
 		if (particle.getFitnesspBest() < particle.getFitness()) {
 			particle.setpBest(pPositions);
 			particle.setFitnesspBest(particle.getFitness());
+			particle.setgBestFAR(particle.getFAR());
+			particle.setgBestFRR(particle.getFRR());
 		}
 	}
 
@@ -47,6 +48,8 @@ public class Update {
 			for (int i = 0; i < population.size(); i++) {
 				population.get(i).setgBest(population.get(0).getPosition());
 				population.get(i).setFitnessgBest(population.get(0).getFitness());
+				population.get(i).setgBestFAR(population.get(0).getFAR());
+				population.get(i).setgBestFRR(population.get(0).getFRR());
 			}
 	}
 
diff --git a/PSO_Keystroke/src/test/Test.java b/PSO_Keystroke/src/test/Test.java
index cbd51e2..d21d0cb 100644
--- a/PSO_Keystroke/src/test/Test.java
+++ b/PSO_Keystroke/src/test/Test.java
@@ -4,11 +4,11 @@ public class Test {
 
 	public static void main(String[] args) throws Exception {
 
-		double resultado = 0;
-		int total = 50;
-		int desabilitados = 25;
-		resultado = (100 * desabilitados) / total;
-		System.out.println(resultado);
+		double sigmoid = 1 / (1 + Math.exp(-10));
+		double a = 1.0;
+		int b = 1;
+		if (a == b)
+			System.out.println(sigmoid);
 
 	}
 
